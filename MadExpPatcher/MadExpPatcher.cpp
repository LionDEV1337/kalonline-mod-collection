#include <iostream> 
#include <fstream> 
#include <iostream>
#include <istream>
#include <string>
#include <algorithm> 
#include <functional> 
#include <stdio.h>
#include <tchar.h>
using namespace std; 

unsigned char explevel[792] = 
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x1E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x85, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xCA, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x9C, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x8C, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x8C, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xE3, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xBD, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA2, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x4E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xB8, 0x9C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0xFB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x06, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xFA, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x91, 0xA2, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x6D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x96, 0x62, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x89, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x59, 0xED, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x99, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xF9, 0x9C, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x08, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x60, 0xF2, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x72, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA2, 0xA7, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDB, 0xB5, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xB5, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x14, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x7D, 0xD7, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x5D, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,
	0xA4, 0xFF, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x2B, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x58, 0x61, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x3E, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x11, 0x7D, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xFD, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x35, 0xCE, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0x30, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x0A, 0xAA, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x0A, 0x87, 0x01, 0x00, 0x00, 0x00, 0x00,
	0x5D, 0x81, 0xD5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0xAC, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00,
	0xEE, 0xAE, 0xA4, 0x02, 0x00, 0x00, 0x00, 0x00, 0xCF, 0x4E, 0x2C, 0x03, 0x00, 0x00, 0x00, 0x00,
	0x98, 0x11, 0xCF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x64, 0x92, 0x04, 0x00, 0x00, 0x00, 0x00,
	0x8D, 0xCB, 0x7C, 0x05, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x16, 0x96, 0x06, 0x00, 0x00, 0x00, 0x00,
	0xA9, 0xA7, 0xE7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x45, 0xBF, 0x7C, 0x09, 0x00, 0x00, 0x00, 0x00,
	0xF2, 0xDE, 0x62, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x91, 0x3B, 0xAA, 0x0D, 0x00, 0x00, 0x00, 0x00,
	0xCC, 0x47, 0x66, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5A, 0xAE, 0x13, 0x00, 0x00, 0x00, 0x00,
	0x88, 0x73, 0x9E, 0x17, 0x00, 0x00, 0x00, 0x00, 0x96, 0x76, 0xDC, 0x46, 0x00, 0x00, 0x00, 0x00,
	0xB6, 0xB3, 0x09, 0x55, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xD3, 0x0C, 0x66, 0x00, 0x00, 0x00, 0x00,
	0x65, 0x03, 0x77, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x13, 0x7A, 0xF6, 0x92, 0x00, 0x00, 0x00, 0x00,
	0xD8, 0x45, 0x5C, 0xB0, 0x00, 0x00, 0x00, 0x00, 0xB7, 0x44, 0xA3, 0xD3, 0x00, 0x00, 0x00, 0x00,
	0x19, 0x81, 0xF8, 0xFD, 0x00, 0x00, 0x00, 0x00, 0xB3, 0x3A, 0xC5, 0x30, 0x01, 0x00, 0x00, 0x00,
	0x9C, 0xF1, 0xBA, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x38, 0xD8, 0xE1, 0xB6, 0x01, 0x00, 0x00, 0x00,
	0x6F, 0x2B, 0xAA, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x31, 0x01, 0x01, 0x78, 0x02, 0x00, 0x00, 0x00,
	0x94, 0x40, 0x69, 0xF6, 0x02, 0x00, 0x00, 0x00, 0x85, 0x98, 0x19, 0x8E, 0x03, 0x00, 0x00, 0x00,
	0x85, 0x74, 0x20, 0x44, 0x04, 0x00, 0x00, 0x00, 0x62, 0x22, 0x8F, 0x1E, 0x05, 0x00, 0x00, 0x00,
	0x14, 0x99, 0xAD, 0x24, 0x06, 0x00, 0x00, 0x00, 0x94, 0x9A, 0x38, 0x5F, 0x07, 0x00, 0x00, 0x00,
	0xD8, 0x42, 0xAC, 0xD8, 0x08, 0x00, 0x00, 0x00, 0x38, 0x80, 0x9D, 0x9D, 0x0A, 0x00, 0x00, 0x00,
	0xB9, 0x70, 0x25, 0xBD, 0x0C, 0x00, 0x00, 0x00, 0x65, 0x38, 0x62, 0x49, 0x0F, 0x00, 0x00, 0x00,
	0x0E, 0x9C, 0x11, 0x58, 0x12, 0x00, 0x00, 0x00, 0xEA, 0x87, 0x4A, 0x03, 0x16, 0x00, 0x00, 0x00,
	0x03, 0xB1, 0x5B, 0x6A, 0x1A, 0x00, 0x00, 0x00, 0x67, 0xBD, 0xD6, 0xB2, 0x1F, 0x00, 0x00, 0x00,
	0xC3, 0xDA, 0xD0, 0x09, 0x26, 0x00, 0x00, 0x00
};

void setLevelEXP(int level, __int64 i)
{
	unsigned char exphexblock;
	for (int offset = 0; offset < 8; offset++) 
	{
		if (i != 0) 
		{
			exphexblock = (unsigned char) i%256;
			i = (__int64) i/256;
			explevel[(level*8)+offset]= exphexblock;
		} 
		else 
		{
			explevel[(level*8)+offset]= 0x00;
		}
	}
}

void readConfig()
{
	string prefix = "[Level ";
	ifstream f;  
	string s;
	string t;
	int level  = 0;
	__int64 exp = 0;
	ifstream ifile("exptable.txt");
	if (ifile) 
	{
		f.open("exptable.txt", ios::in);
		while (!f.eof())         
		{
			std::getline(f, s);     
			if (s.substr(0, prefix.size()) == prefix) 
			{
				t = (s.substr(prefix.size(),10));    
				level =  atoi( t.c_str() );
				t = (s.substr(13,s.size()));    
				exp =   _atoi64( t.c_str());
			}        
			if (exp != 0 || exp != NULL)
				setLevelEXP(level,exp);
		}
		f.close();            
	}
}


int main()  
{
	readConfig();
	ifstream::pos_type size; 
	ifstream::pos_type sizeg; 
	char filein[20];
	cout << 
		"MadKnight EXP Patcher for Mainserver and Engine\n\n" <<
		"Write input file name for example Mainserver.exe or Engine.exe.\n" << 
		"The Result will be pached.exe\n" << endl;

	cin >> filein;
	ifstream infile(filein, ios::in | ios::binary | ios::ate); 
	ofstream outfile("patched.exe", ios::out | ios::binary); 

	if (infile.is_open()) 
	{ 
		unsigned char searchpattern[] = 
		{ 
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x1E, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x85, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xCA, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0E, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x27, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x9C, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA6, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x8C, 0x2D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x8C, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAE, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xE3, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xBD, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB4, 0xDA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA2, 0x0D, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x4E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xB8, 0x9C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0xFB, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x06, 0x6F, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4E, 0xFA, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x91, 0xA2, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA8, 0x6D, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x96, 0x62, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x89, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x59, 0xED, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9D, 0x99, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF9, 0x9C, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE8, 0x08, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x60, 0xF2, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8D, 0x72, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA2, 0xA7, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDB, 0xB5, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xB5, 0xC8, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x14, 0x2B, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x7D, 0xD7, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2F, 0x5D, 0x3E, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xA4, 0xFF, 0x4A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x2B, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x58, 0x61, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x3E, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x11, 0x7D, 0x9C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF3, 0xFD, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x35, 0xCE, 0xE1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFB, 0x30, 0x0F, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x0A, 0xAA, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0xB5, 0x0A, 0x87, 0x01, 0x00, 0x00, 0x00, 0x00,
			0x5D, 0x81, 0xD5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x14, 0xAC, 0x33, 0x02, 0x00, 0x00, 0x00, 0x00,
			0xEE, 0xAE, 0xA4, 0x02, 0x00, 0x00, 0x00, 0x00, 0xCF, 0x4E, 0x2C, 0x03, 0x00, 0x00, 0x00, 0x00,
			0x98, 0x11, 0xCF, 0x03, 0x00, 0x00, 0x00, 0x00, 0xBA, 0x64, 0x92, 0x04, 0x00, 0x00, 0x00, 0x00,
			0x8D, 0xCB, 0x7C, 0x05, 0x00, 0x00, 0x00, 0x00, 0xDF, 0x16, 0x96, 0x06, 0x00, 0x00, 0x00, 0x00,
			0xA9, 0xA7, 0xE7, 0x07, 0x00, 0x00, 0x00, 0x00, 0x45, 0xBF, 0x7C, 0x09, 0x00, 0x00, 0x00, 0x00,
			0xF2, 0xDE, 0x62, 0x0B, 0x00, 0x00, 0x00, 0x00, 0x91, 0x3B, 0xAA, 0x0D, 0x00, 0x00, 0x00, 0x00,
			0xCC, 0x47, 0x66, 0x10, 0x00, 0x00, 0x00, 0x00, 0x07, 0x5A, 0xAE, 0x13, 0x00, 0x00, 0x00, 0x00,
			0x88, 0x73, 0x9E, 0x17, 0x00, 0x00, 0x00, 0x00, 0x96, 0x76, 0xDC, 0x46, 0x00, 0x00, 0x00, 0x00,
			0xB6, 0xB3, 0x09, 0x55, 0x00, 0x00, 0x00, 0x00, 0x7B, 0xD3, 0x0C, 0x66, 0x00, 0x00, 0x00, 0x00,
			0x65, 0x03, 0x77, 0x7A, 0x00, 0x00, 0x00, 0x00, 0x13, 0x7A, 0xF6, 0x92, 0x00, 0x00, 0x00, 0x00,
			0xD8, 0x45, 0x5C, 0xB0, 0x00, 0x00, 0x00, 0x00, 0xB7, 0x44, 0xA3, 0xD3, 0x00, 0x00, 0x00, 0x00,
			0x19, 0x81, 0xF8, 0xFD, 0x00, 0x00, 0x00, 0x00, 0xB3, 0x3A, 0xC5, 0x30, 0x01, 0x00, 0x00, 0x00,
			0x9C, 0xF1, 0xBA, 0x6D, 0x01, 0x00, 0x00, 0x00, 0x38, 0xD8, 0xE1, 0xB6, 0x01, 0x00, 0x00, 0x00,
			0x6F, 0x2B, 0xAA, 0x0E, 0x02, 0x00, 0x00, 0x00, 0x31, 0x01, 0x01, 0x78, 0x02, 0x00, 0x00, 0x00,
			0x94, 0x40, 0x69, 0xF6, 0x02, 0x00, 0x00, 0x00, 0x85, 0x98, 0x19, 0x8E, 0x03, 0x00, 0x00, 0x00,
			0x85, 0x74, 0x20, 0x44, 0x04, 0x00, 0x00, 0x00, 0x62, 0x22, 0x8F, 0x1E, 0x05, 0x00, 0x00, 0x00,
			0x14, 0x99, 0xAD, 0x24, 0x06, 0x00, 0x00, 0x00, 0x94, 0x9A, 0x38, 0x5F, 0x07, 0x00, 0x00, 0x00,
			0xD8, 0x42, 0xAC, 0xD8, 0x08, 0x00, 0x00, 0x00, 0x38, 0x80, 0x9D, 0x9D, 0x0A, 0x00, 0x00, 0x00,
			0xB9, 0x70, 0x25, 0xBD, 0x0C, 0x00, 0x00, 0x00, 0x65, 0x38, 0x62, 0x49, 0x0F, 0x00, 0x00, 0x00,
			0x0E, 0x9C, 0x11, 0x58, 0x12, 0x00, 0x00, 0x00, 0xEA, 0x87, 0x4A, 0x03, 0x16, 0x00, 0x00, 0x00,
			0x03, 0xB1, 0x5B, 0x6A, 0x1A, 0x00, 0x00, 0x00, 0x67, 0xBD, 0xD6, 0xB2, 0x1F, 0x00, 0x00, 0x00,
			0xC3, 0xDA, 0xD0, 0x09, 0x26, 0x00, 0x00, 0x00
		};  

		size = infile.tellg(); 
		char *memblock = new char[(unsigned int) size]; 
		infile.seekg(0, ios::beg); 
		infile.read(memblock, size); 
		infile.close(); 
		size_t z = 1;
		for (;;)
		{
			char* i = search((memblock ), memblock + (unsigned int) size, searchpattern, searchpattern + sizeof(searchpattern)); 
			if(i < memblock + (unsigned int) size) 
			{ 
				memcpy(memblock + (i - memblock), explevel, sizeof(explevel)); 
				cout << "EXP Table found! " << z++ << endl; 
			} 
			else 
			{ 
				if(z==1)
					cout << "EXP Table not found! " << endl; 
				break;
			} 
		}
		for(size_t x = 0; x < size; x++) 
		{ 
			outfile << memblock[x]; 
		} 
		outfile.close(); 
		if(z!=1)
			cout << "Successfully patched \n" << endl; 
		delete [] memblock; 
	} 
	else 
	{ 
		cout << "Unable to find file. \n" << endl; 
	}

	int i;
	cin >> i;

	return 0; 
}  